calcul_periodicite <- function(bitcoin_data, p) {
n <- length(bitcoin_data)
N <- floor(n / p)
periode <- rep(NA, p)
for (i in 1:p) {
indices <- i + (0:N) * p
indices <- indices[indices <= n]  # Pour éviter les indices dépassant la longueur de bitcoin_data
periode[i] <- mean(bitcoin_data[indices], na.rm = TRUE)
}
if (n == N * p) {
Date <- rep(periode, N)
} else {
Date <- c(rep(periode, N), periode[1:(n - N * p)])
}
return(Date)
}
# Calcule de la périodicité
p <- 7
periodicite <- calcul_periodicite(bitcoin_data$Price_detrend, p)
bitcoin_data$periodicite <- periodicite
print(bitcoin_data$periodicite)
plot(bitcoin_data$Jours, bitcoin_data$Price, type = "l", col = "blue",
main = "Prix avec tendance linéaire et périodicité", xlab = "Date", ylab = "Price")
lines(bitcoin_data$Jours, bitcoin_data$tendance, col = "red")
lines(bitcoin_data$Jours, bitcoin_data$periodicite, col = "green")
lines(bitcoin_data$Jours, bitcoin_data$hat_Price, col = "purple", lty = 2)
legend("topleft", legend = c("Observed", "Trend", "Periodicite", "Predictions"),
col = c("blue", "red", "green", "purple"), lty = c(1, 1, 1, 2))
# Calcul des prédictions du modèle additif
bitcoin_data$hat_Price <- bitcoin_data$tendance + bitcoin_data$periodicite
# Calcul des résidus
bitcoin_data$residus <- bitcoin_data$Price - bitcoin_data$hat_Price
# Plot des résidus
plot(bitcoin_data$Jours, bitcoin_data$residus, type = "h", col = "blue",
main = "Résidus du Modèle Additif", xlab = "Date", ylab = "Résidus")
abline(h = 0, col = "red", lty = 2)
n <- length(bitcoin_data$Price)
nouveau_jours <- (n+1):(n+10)
# Conversion en série temporelle
ts_data_bitcoin <- ts(bitcoin_data$Price, nouveau_jours)
# Calcul de la tendance linéaire
# Nous devons créer une variable de temps pour l'ajustement du modèle linéaire
time_index <- seq_along(ts_data_bitcoin)
tendance_model <- lm(ts_data_bitcoin ~ time_index)
# Stocker les résultats dans un objet `tendance`
bitcoin_data$tendance_10 <- fitted(tendance_model)
# Affichage des tendances pour les 10 prochains jours
head(bitcoin_data$tendance, 10)
moment_periode <- nouveau_jours %% 7 + 1
prediction_periode <- periodicite[moment_periode]
print(prediction_periode)
# Nombre de jours à prévoir
moment_periode <- 10
# Créer une séquence pour les nouveaux jours
nouveau_jours <- (nrow(bitcoin_data) + 1):(nrow(bitcoin_data) + moment_periode)
# Calculer la tendance projetée
tendance_previsions <- predict(tendance_model, newdata = data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode))
# Calculer le moment de la période pour chaque nouveau jour
moment_periode <- nouveau_jours %% 7 + 1
# Appliquer la périodicité aux prévisions
prediction_periode <- periodicite[moment_periode]
# Calcul des prévisions finales
prevision_modele_add <- tendance_previsions + prediction_periode
# Stocker les prévisions dans un objet
prevision_modele_add <- data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode,
Previsions = prevision_modele_add)
print(prevision_modele_add)
xlim <- c(1, n+10)
ylim <- range(c(bitcoin_data$Price, xlim=xlim, ylim=ylim), na.rm = TRUE)
plot(bitcoin_data$Price, xlim=xlim, ylim=ylim)
lines(bitcoin_data$hat_Price)
lines(nouveau_jours, prevision_modele_add$Jours, type = 'p', pch=16)
length(CAC40_NA$Indice)  # Longueur des données originales
lissage_exponentiel_double <- HoltWinters(CAC40_NA$Indice, beta = TRUE, gamma = FALSE)
length(fitted(lissage_exponentiel_double))  # Longueur des valeurs lissées
# Appliquer le lissage exponentiel double
library(forecast)
ts_data <- ts(CAC40_NA$Indice, frequency = 30)
lissage_exponentiel_double <- ets(ts_data, model = "AAN")
# Extraire les valeurs lissées
valeurs_led <- fitted(lissage_exponentiel_double)
# Vérifiez les valeurs lissées
#head(valeurs_lisse)
# Ajuster la longueur
min_length <- min(length(CAC40_NA$Indice), length(valeurs_led))
CAC40_NA$Indice_led <- NA  # Créer une colonne avec des NA
CAC40_NA$Indice_led[1:min_length] <- valeurs_led[1:min_length]
# Vérifiez les dimensions
length(CAC40_NA$Indice)
length(CAC40_NA$Indice_led)
# Tracer le graphique
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Indice, color = "Indice"), size = 1) +
geom_line(aes(y = Indice_les, color = "LES (Lissage Exponentiel Simple)"), linetype = "dashed", size = 1) +
geom_line(aes(y = Indice_led, color = "LED (Lissage Exponentiel Double)"), linetype = "dotted", size = 1) +
labs(title = "CAC40 - Indice et Séries Lissées (LES et LED)",
x = "Date",
y = "Valeur") +
scale_color_manual(values = c("Indice" = "blue",
"LES (Lissage Exponentiel Simple)" = "green",
"LED (Lissage Exponentiel Double)" = "red")) +
theme_minimal()
bitcoin_data$Jours <- as.Date(rownames(bitcoin_data))
plot(bitcoin_data$Price_detrend)
lines(periodicite)
for(i in 1:n) {
rect(bitcoin_data$Jours[3+(i-1)*p], -6000, bitcoin_data$Jours[4+(i-1)*p], 6000,
col = "gray", density = 20, border = NA)
text(bitcoin_data$Jours[3.5+(i-1)*p], 500, labels = "Week-end", col = "gray30")
}
N <- floor(nrow(bitcoin_data) / p)
bitcoin_data$Jours <- as.Date(rownames(bitcoin_data))
plot(bitcoin_data$Price_detrend)
lines(periodicite)
for(i in 1:N) {
rect(bitcoin_data$Jours[3+(i-1)*p], -6000, bitcoin_data$Jours[4+(i-1)*p], 6000,
col = "gray", density = 20, border = NA)
text(bitcoin_data$Jours[3.5+(i-1)*p], 500, labels = "Week-end", col = "gray30")
}
N <- floor(nrow(bitcoin_data) / p)
p <- 7
bitcoin_data$Jours <- as.Date(rownames(bitcoin_data))
plot(bitcoin_data$Price_detrend)
lines(periodicite)
for(i in 1:N) {
rect(bitcoin_data$Jours[3+(i-1)*p], -6000, bitcoin_data$Jours[4+(i-1)*p], 6000,
col = "gray", density = 20, border = NA)
text(bitcoin_data$Jours[3.5+(i-1)*p], 500, labels = "Week-end", col = "gray30")
}
CAC40 <- read.csv("CAC40.csv")
head(CAC40,3)
CAC40_sans_weekend <- ("CAC40_sans_weekend.csv")
head(CAC40_sans_weekend,3)
serie_chronologique <- read.csv("serie_chronologique.csv")
head(serie_chronologique,3)
t <- serie_chronologique$t
y <- serie_chronologique$y
plot(t,y)
plot(t,exp(y))
plot(t,log(y))
plot(t,sqrt(y))
res_lm  <- lm(y~t)
residus <- y - res_lm[["fitted.values"]]
MSE <- sum(residus^2)
print(MSE)
res_lm_log <- lm(log(y)~t)
residus_log <- y - exp(res_lm_log[["fitted.values"]])
MSE_log <- sum(residus_log^2)
print(MSE_log)
y_sqrt <- sqrt(y)
res_lm_sqrt <- lm(y_sqrt ~ t)
residus_sqrt <- y - (res_lm_sqrt[["fitted.values"]])^2
MSE_sqrt <- sum(residus_sqrt^2)
print(MSE_sqrt)
res_lm_log <- lm(log(y) ~ t)
fitted_exp <- exp(res_lm_log[["fitted.values"]])
residus_exp <- y - fitted_exp
MSE_exp <- sum(residus_exp^2)
print(MSE_exp)
# Comparaison des MSE
MSE_values <- c(MSE, MSE_log, MSE_sqrt, MSE_exp)
names(MSE_values) <- c("Linéaire", "Logarithmique", "Racine carrée", "Exponentielle")
# Affichage des MSE
print("Comparaison des MSE:")
print(MSE_values)
# Conclusion
best_transformation <- names(MSE_values)[which.min(MSE_values)]
print(paste("La transformation qui permet le plus de se rapprocher d'une serie chronologique avec une forme lineaire est, la transformation:", best_transformation))
library(ggplot2)
mse_data <- data.frame(
Transformation = c("Linéaire", "Logarithmique", "Racine carrée", "Exponentielle"),
MSE = c(MSE, MSE_log, MSE_sqrt, MSE_exp)
)
ggplot(mse_data, aes(x = Transformation, y = MSE, fill = Transformation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Comparaison des MSE pour les différentes transformations",
x = "Transformation",
y = "MSE") +
theme(legend.position = "none")
serie_brute <- read.csv("CAC40_sans_weekend.csv")
summary(serie_brute)
Date <- serie_brute$Date
Indice <- serie_brute$Indice
serie_brute$Date <- as.Date(serie_brute$Date, format="%Y-%m-%d")
serie_brute <- na.omit(serie_brute)
plot(serie_brute$Date, serie_brute$Indice, type="l", col="blue", lwd=2,
xlab="Date", ylab="Indice",
main="Évolution de l'Indice CAC40 sur le Temps")
print(serie_brute)
diff(serie_brute$Indice)
serie_diff <- data.frame(
Date = serie_brute$Date[-1],  Indice_diff = diff(serie_brute$Indice))
serie_diff
plot(serie_diff)
abline(h=0, col='gray50')
# Calcul des différences relatives
# Créer un vecteur pour les différences relatives
serie_diff_relative <- numeric(length(serie_diff$Indice_diff) - 1)
# Calculer les différences relatives
for (i in 2:length(serie_diff$Indice_diff)) {
serie_diff_relative[i - 1] <- (serie_diff$Indice_diff[i] - serie_diff$Indice_diff[i - 1]) / serie_diff$Indice_diff[i - 1]
}
# Ajouter des NA pour le premier élément
serie_diff_relative <- c(NA, serie_diff_relative)
# Afficher les premières valeurs de la série des différences relatives
print(serie_diff_relative)
plot(serie_diff_relative)
abline(h=0, col='gray50')
#install.packages("devtools")
#devtools::install_github("amrrs/coindeskr")
library(coindeskr)
bitcoin_data <- get_historic_price(start = "2021-01-01", end = "2021-03-31")
head(bitcoin_data, 3)
bitcoin_data$Date <- as.Date(rownames(bitcoin_data))
head(bitcoin_data,3)
plot(bitcoin_data$Date, bitcoin_data$Price, col = "blue", pch = 19, main = "Presentation de la Serie Chronologique : Prix du Bitcoin", xlab = "Date", ylab = "Prix")
diff(bitcoin_data$Price)
serie_diff_bitcoin <- data.frame(
Date = bitcoin_data$Date[-1],  Indice_diff = diff(bitcoin_data$Price))
serie_diff_bitcoin
plot(serie_diff_bitcoin)
moyenne_mobile <- function(serie_k){
# Determination de la taille de la serie
n <- length(serie)
# Definition du vecteur qui va recevoir la moyenne mobile d'ordre k
mm_k <- rep(NA, n)
# Boucle pour chaque indice i pour lequel on peut calculer une moyenne mobile
for(i in (k+1):(n-k)) {
#La moyenne de la serie pour les 2k indices autour de l'indice i est stockee
# dans la ieme place du vecteur mm_k
mm_k[i] <- mean(serie[(i-k) : (i+k)], na.rm=True)
#L'option "na.rm=TRUE" de la fonction mean permet d'ignorer les valeures manquantes
# (notees NA sous R) potentiellement presente dans la serie
}
# Renvoie du resultat
return(mm_k)
}
CAC40_NA <- read.csv("CAC40.csv")
CAC40_NA
# Installation du Package `zoo`
#Pour calculer la moyenne mobile hebdomadaire d'ordre 3 en R, il est nécessaire de s'assurer que la fonction moyenne_mobile est définie ou d'utiliser une fonction intégrée telle que `rollmean` du package zoo.
#install.packages("zoo")
library(zoo)
# Le message d'erreur
#Erreur dans `$<-.data.frame`(`*tmp*`, Indice_mm, value = c(6058.38666666667,  :
#le tableau de remplacement a 51 lignes, le tableau remplacé en a 53
CAC40_NA$Indice_mm <- rollmean(CAC40_NA$Indice, 3, fill = NA, align = "right")
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Indice, color = "Indice")) +
geom_line(aes(y = Indice_mm, color = "Moyenne Mobile"), linetype = "dashed", size = 1) +
labs(title = "CAC40 - Indice et Moyenne Mobile",
x = "Date",
y = "Valeur") +
scale_color_manual(values = c("Indice" = "blue", "Moyenne Mobile" = "red")) +
theme_minimal()
CAC40_NA$Residus <- CAC40_NA$Indice - CAC40_NA$Indice_mm
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Indice, color = "Indice")) +
geom_line(aes(y = Indice_mm, color = "Moyenne Mobile"), linetype = "dashed", size = 1) +
labs(title = "CAC40 - Indice et Moyenne Mobile",
x = "Date",
y = "Valeur") +
scale_color_manual(values = c("Indice" = "blue", "Moyenne Mobile" = "red")) +
theme_minimal()
# Graphe des résidus
ggplot(data = CAC40_NA, aes(x = Date, y = Residus)) +
geom_line(color = "purple") +
labs(title = "CAC40 - Résidus de la Moyenne Mobile",
x = "Date",
y = "Résidus") +
theme_minimal()
#install.packages("forecast")
#install.packages("ggplot2")
#install.packages("stats")
library(forecast)
library(ggplot2)
library(stats)
# Verification des valeurs NA, NaN
sum(is.na(CAC40_NA$Indice))  # Nombre de NA
sum(is.nan(CAC40_NA$Indice))  # Nombre de NaN
# Nettoyage des données en supprimant les lignes contenant NA, NaN
CAC40_NA <- CAC40_NA[!is.na(CAC40_NA$Indice) & !is.nan(CAC40_NA$Indice), ]
# Application du lissage exponentiel simple avec HoltWinters
ts_data <- ts(CAC40_NA$Indice, frequency = 30)  # Ajustez la fréquence si nécessaire
lissage_exponentiel <- HoltWinters(ts_data, beta = FALSE, gamma = FALSE)
# Extraction des valeurs lissées
Indice_les <- fitted(lissage_exponentiel)[, "xhat"]
# Ajustement des longueurs
min_length <- min(length(CAC40_NA$Indice), length(Indice_les))
CAC40_NA$Indice_les <- NA  # Créer la colonne avec des NA
CAC40_NA$Indice_les[1:min_length] <- Indice_les[1:min_length]  # Remplacer les valeurs lissées
# la longueur
length(CAC40_NA$Indice)
length(CAC40_NA$Indice_les)
length(CAC40_NA$Indice)  # Longueur des données originales
lissage_exponentiel_double <- HoltWinters(CAC40_NA$Indice, beta = TRUE, gamma = FALSE)
length(fitted(lissage_exponentiel_double))  # Longueur des valeurs lissées
# Appliquer le lissage exponentiel double
library(forecast)
ts_data <- ts(CAC40_NA$Indice, frequency = 30)
lissage_exponentiel_double <- ets(ts_data, model = "AAN")
# Extraire les valeurs lissées
valeurs_led <- fitted(lissage_exponentiel_double)
# Vérifiez les valeurs lissées
#head(valeurs_lisse)
# Ajuster la longueur
min_length <- min(length(CAC40_NA$Indice), length(valeurs_led))
CAC40_NA$Indice_led <- NA  # Créer une colonne avec des NA
CAC40_NA$Indice_led[1:min_length] <- valeurs_led[1:min_length]
# Vérifiez les dimensions
length(CAC40_NA$Indice)
length(CAC40_NA$Indice_led)
# Tracer le graphique
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Indice, color = "Indice"), size = 1) +
geom_line(aes(y = Indice_les, color = "LES (Lissage Exponentiel Simple)"), linetype = "dashed", size = 1) +
geom_line(aes(y = Indice_led, color = "LED (Lissage Exponentiel Double)"), linetype = "dotted", size = 1) +
labs(title = "CAC40 - Indice et Séries Lissées (LES et LED)",
x = "Date",
y = "Valeur") +
scale_color_manual(values = c("Indice" = "blue",
"LES (Lissage Exponentiel Simple)" = "green",
"LED (Lissage Exponentiel Double)" = "red")) +
theme_minimal()
# Calcul des résidus
CAC40_NA$Residus_les <- CAC40_NA$Indice - CAC40_NA$Indice_les
CAC40_NA$Residus_led <- CAC40_NA$Indice - CAC40_NA$Indice_led
# Graphe des residus
# Tracer les résidus
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Residus_les, color = "Résidus LES"), size = 1) +
geom_line(aes(y = Residus_led, color = "Résidus LED"), linetype = "dashed", size = 1) +
labs(title = "CAC40 - Résidus des Séries Lissées (LES et LED)",
x = "Date",
y = "Résidus") +
scale_color_manual(values = c("Résidus LES" = "green", "Résidus LED" = "red")) +
theme_minimal()
library(coindeskr)
bitcoin_data <- get_historic_price(start="2021-03-12", end = "2021-04-07")
bitcoin_data$Date <- 1:length(bitcoin_data$Price)
print(bitcoin_data)
# Conversion en série temporelle
ts_data_bitcoin <- ts(bitcoin_data$Price, frequency = 30)
# Calcul de la tendance linéaire
# Nous devons créer une variable de temps pour l'ajustement du modèle linéaire
time_index <- seq_along(ts_data_bitcoin)
tendance_model <- lm(ts_data_bitcoin ~ time_index)
# Stocker les résultats dans un objet `tendance`
bitcoin_data$tendance <- fitted(tendance_model)
bitcoin_data$Price_detrend <- bitcoin_data$Price - tendance_model$fitted.values
calcul_periodicite <- function(bitcoin_data, p) {
n <- length(bitcoin_data)
N <- floor(n / p)
periode <- rep(NA, p)
for (i in 1:p) {
indices <- i + (0:N) * p
indices <- indices[indices <= n]  # Pour éviter les indices dépassant la longueur de bitcoin_data
periode[i] <- mean(bitcoin_data[indices], na.rm = TRUE)
}
if (n == N * p) {
Date <- rep(periode, N)
} else {
Date <- c(rep(periode, N), periode[1:(n - N * p)])
}
return(Date)
}
periodicite <- calcul_periodicite(bitcoin_data$Price_detrend, 7)
N <- floor(nrow(bitcoin_data) / p)
p <- 7
bitcoin_data$Jours <- as.Date(rownames(bitcoin_data))
plot(bitcoin_data$Price_detrend)
lines(periodicite)
for(i in 1:N) {
rect(bitcoin_data$Jours[3+(i-1)*p], -6000, bitcoin_data$Jours[4+(i-1)*p], 6000,
col = "gray", density = 20, border = NA)
text(bitcoin_data$Jours[3.5+(i-1)*p], 500, labels = "Week-end", col = "gray30")
}
# Le modèle additif avec une tendance linéaire et une périodicité de 7 jours s'écrit comme suit :
# Yt = (β0 + β1t) + St + Et
# Ou St représente la composante saisonnière avec une période de 7 jours. Le nombre total de paramètres à estimer est de 9 :
# * 2 pour la tendance lineaire (β0 et β1)
# * 7 pour la composante saisonnière (un pour chaque jour de la période).
calcul_periodicite <- function(bitcoin_data, p) {
n <- length(bitcoin_data)
N <- floor(n / p)
periode <- rep(NA, p)
for (i in 1:p) {
indices <- i + (0:N) * p
indices <- indices[indices <= n]  # Pour éviter les indices dépassant la longueur de bitcoin_data
periode[i] <- mean(bitcoin_data[indices], na.rm = TRUE)
}
if (n == N * p) {
Date <- rep(periode, N)
} else {
Date <- c(rep(periode, N), periode[1:(n - N * p)])
}
return(Date)
}
# Calcule de la périodicité
p <- 7
periodicite <- calcul_periodicite(bitcoin_data$Price_detrend, p)
bitcoin_data$periodicite <- periodicite
print(bitcoin_data$periodicite)
plot(bitcoin_data$Jours, bitcoin_data$Price, type = "l", col = "blue",
main = "Prix avec tendance linéaire et périodicité", xlab = "Date", ylab = "Price")
lines(bitcoin_data$Jours, bitcoin_data$tendance, col = "red")
lines(bitcoin_data$Jours, bitcoin_data$periodicite, col = "green")
lines(bitcoin_data$Jours, bitcoin_data$hat_Price, col = "purple", lty = 2)
legend("topleft", legend = c("Observed", "Trend", "Periodicite", "Predictions"),
col = c("blue", "red", "green", "purple"), lty = c(1, 1, 1, 2))
# Calcul des prédictions du modèle additif
bitcoin_data$hat_Price <- bitcoin_data$tendance + bitcoin_data$periodicite
# Calcul des résidus
bitcoin_data$residus <- bitcoin_data$Price - bitcoin_data$hat_Price
# Plot des résidus
plot(bitcoin_data$Jours, bitcoin_data$residus, type = "h", col = "blue",
main = "Résidus du Modèle Additif", xlab = "Date", ylab = "Résidus")
abline(h = 0, col = "red", lty = 2)
n <- length(bitcoin_data$Price)
nouveau_jours <- (n+1):(n+10)
# Conversion en série temporelle
ts_data_bitcoin <- ts(bitcoin_data$Price, nouveau_jours)
# Calcul de la tendance linéaire
# Nous devons créer une variable de temps pour l'ajustement du modèle linéaire
time_index <- seq_along(ts_data_bitcoin)
tendance_model <- lm(ts_data_bitcoin ~ time_index)
# Stocker les résultats dans un objet `tendance`
bitcoin_data$tendance_10 <- fitted(tendance_model)
# Affichage des tendances pour les 10 prochains jours
head(bitcoin_data$tendance, 10)
moment_periode <- nouveau_jours %% 7 + 1
prediction_periode <- periodicite[moment_periode]
print(prediction_periode)
# Nombre de jours à prévoir
moment_periode <- 10
# Créer une séquence pour les nouveaux jours
nouveau_jours <- (nrow(bitcoin_data) + 1):(nrow(bitcoin_data) + moment_periode)
# Calculer la tendance projetée
tendance_previsions <- predict(tendance_model, newdata = data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode))
# Calculer le moment de la période pour chaque nouveau jour
moment_periode <- nouveau_jours %% 7 + 1
# Appliquer la périodicité aux prévisions
prediction_periode <- periodicite[moment_periode]
# Calcul des prévisions finales
prevision_modele_add <- tendance_previsions + prediction_periode
# Stocker les prévisions dans un objet
prevision_modele_add <- data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode,
Previsions = prevision_modele_add)
print(prevision_modele_add)
xlim <- c(1, n+10)
ylim <- range(c(bitcoin_data$Price, xlim=xlim, ylim=ylim), na.rm = TRUE)
plot(bitcoin_data$Price, xlim=xlim, ylim=ylim)
lines(bitcoin_data$hat_Price)
lines(nouveau_jours, prevision_modele_add$Jours, type = 'p', pch=16)
p <- 7
N <- floor(nrow(bitcoin_data) / p)
bitcoin_data$Jours <- as.Date(rownames(bitcoin_data))
plot(bitcoin_data$Price_detrend)
lines(periodicite)
for(i in 1:N) {
rect(bitcoin_data$Jours[3+(i-1)*p], -6000, bitcoin_data$Jours[4+(i-1)*p], 6000,
col = "gray", density = 20, border = NA)
text(bitcoin_data$Jours[3.5+(i-1)*p], 500, labels = "Week-end", col = "gray30")
}
xlim <- c(1, n + 10)
ylim <- range(c(bitcoin_data$Price, prevision_modele_add$Previsions), na.rm = TRUE)
plot(bitcoin_data$Price, type = 'l', xlim = xlim, ylim = ylim, ylab = "Price", xlab = "Days")
lines(bitcoin_data$hat_Price, col = 'blue')
lines(nouveau_jours, prevision_modele_add$Previsions, type = 'p', pch = 16, col = 'red')
xlim <- c(1, n + 10)
ylim <- range(c(bitcoin_data$Price, prevision_modele_add$Previsions), na.rm = TRUE)
plot(bitcoin_data$Price, type = 'l', xlim = xlim, ylim = ylim, ylab = "Price", xlab = "Days")
lines(bitcoin_data$hat_Price, col = 'blue')
lines(nouveau_jours, prevision_modele_add$Previsions, type = 'p', pch = 16)
xlim <- c(1, n + 10)
ylim <- range(c(bitcoin_data$Price, prevision_modele_add$Previsions), na.rm = TRUE)
plot(bitcoin_data$Price, type = 'l', xlim = xlim, ylim = ylim, ylab = "Price", xlab = "Days")
lines(bitcoin_data$hat_Price, col = 'blue')
lines(prevision_modele_add$Previsions, type = 'p', pch = 16)
# Nombre de jours à prévoir
moment_periode <- 10
# Créer une séquence pour les nouveaux jours
nouveau_jours <- (nrow(bitcoin_data) + 1):(nrow(bitcoin_data) + moment_periode)
# Calculer la tendance projetée
tendance_previsions <- predict(tendance_model, newdata = data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode))
# Calculer le moment de la période pour chaque nouveau jour
moment_periode <- nouveau_jours %% 7 + 1
# Appliquer la périodicité aux prévisions
prediction_periode <- periodicite[moment_periode]
# Calcul des prévisions finales
prevision_modele_add <- tendance_previsions + prediction_periode
# Stocker les prévisions dans un objet
prevision_modele_add <- data.frame(Jours = bitcoin_data$Jours[nrow(bitcoin_data)] + 1:moment_periode,
Previsions = prevision_modele_add)
print(prevision_modele_add)
xlim <- c(1, n + 10)
ylim <- range(c(bitcoin_data$Price, prevision_modele_add$Previsions), na.rm = TRUE)
plot(bitcoin_data$Price, type = 'l', xlim = xlim, ylim = ylim, ylab = "Price", xlab = "Days")
lines(bitcoin_data$hat_Price, col = 'blue')
lines(prevision_modele_add$Previsions, type = 'p', pch = 17)
CAC40_NA <- na.omit(CAC40_NA)
library(ggplot2)
# Assuming Date is a Date or POSIXct column and Residus_les and Residus_led are numeric
ggplot(data = CAC40_NA, aes(x = Date)) +
geom_line(aes(y = Residus_les, color = "Résidus LES"), size = 1) +
geom_line(aes(y = Residus_led, color = "Résidus LED"), linetype = "dashed", size = 1) +
labs(title = "CAC40 - Résidus des Séries Lissées (LES et LED)",
x = "Date",
y = "Résidus") +
scale_color_manual(values = c("Résidus LES" = "green", "Résidus LED" = "red")) +
theme_minimal()
